# Generated by Django 3.1.2 on 2024-06-09 02:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('nutrient_data_bank_number', models.IntegerField()),
                ('data_alpha_carotene', models.FloatField(blank=True, null=True)),
                ('data_beta_carotene', models.FloatField(blank=True, null=True)),
                ('data_beta_cryptoxanthin', models.FloatField(blank=True, null=True)),
                ('data_carbohydrate', models.FloatField(blank=True, null=True)),
                ('data_cholesterol', models.FloatField(blank=True, null=True)),
                ('data_choline', models.FloatField(blank=True, null=True)),
                ('data_fiber', models.FloatField(blank=True, null=True)),
                ('data_lutein_and_zeaxanthin', models.FloatField(blank=True, null=True)),
                ('data_lycopene', models.FloatField(blank=True, null=True)),
                ('data_niacin', models.FloatField(blank=True, null=True)),
                ('data_protein', models.FloatField(blank=True, null=True)),
                ('data_retinol', models.FloatField(blank=True, null=True)),
                ('data_riboflavin', models.FloatField(blank=True, null=True)),
                ('data_selenium', models.FloatField(blank=True, null=True)),
                ('data_sugar_total', models.FloatField(blank=True, null=True)),
                ('data_thiamin', models.FloatField(blank=True, null=True)),
                ('data_water', models.FloatField(blank=True, null=True)),
                ('data_fat_monosaturated_fat', models.FloatField(blank=True, null=True)),
                ('data_fat_polysaturated_fat', models.FloatField(blank=True, null=True)),
                ('data_fat_saturated_fat', models.FloatField(blank=True, null=True)),
                ('data_fat_total_lipid', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_calcium', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_copper', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_iron', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_magnesium', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_phosphorus', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_potassium', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_sodium', models.FloatField(blank=True, null=True)),
                ('data_major_minerals_zinc', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_a_rae', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_b12', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_b6', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_c', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_e', models.FloatField(blank=True, null=True)),
                ('data_vitamins_vitamin_k', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.ingredient')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'ingredient')},
            },
        ),
    ]
